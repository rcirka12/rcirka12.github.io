<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developer Blog]]></title>
  <link href="http://www.ronaldcirka.com/atom.xml" rel="self"/>
  <link href="http://www.ronaldcirka.com/"/>
  <updated>2014-08-05T15:48:04-04:00</updated>
  <id>http://www.ronaldcirka.com/</id>
  <author>
    <name><![CDATA[Ron Cirka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Option in Scala]]></title>
    <link href="http://www.ronaldcirka.com/blog/2014/07/12/the-many-ways-to-use-option-in-scala/"/>
    <updated>2014-07-12T19:54:36-04:00</updated>
    <id>http://www.ronaldcirka.com/blog/2014/07/12/the-many-ways-to-use-option-in-scala</id>
    <content type="html"><![CDATA[<p>There are many way to use Option in Scala. Per scala docs, the idiomatic way to use Option is to treat it as a collection that can have either a length of one of zero.</p>

<p>Let&rsquo;s says we have a basic class, Author</p>

<h3>Simple Option checking</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Author</span><span class="o">(</span><span class="n">name</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span><span class='line'><span class="k">val</span> <span class="n">author</span><span class="k">:</span><span class="kt">Author</span> <span class="o">=</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The traditional way is to check if the name is defined. This way can be prone to error is you forget to add the &ldquo;get&rdquo; method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">author</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="n">author</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">get</span> <span class="k">else</span> <span class="s">&quot;name is empty&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A best way to check for a simple Option is GetOrElse</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="n">author</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;name is empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>In Scala 2.10, the fold method was introduced for Option. You could also use the following syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="n">author</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">fold</span><span class="o">(</span><span class="s">&quot;name is empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It saves a little bit of typing, but not much difference, it might confuse those that are not familiar with it.</p>

<p>You could also use pattern matching on Option, which is generally discouraged, since it is rather verbose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">author</span><span class="o">.</span><span class="n">name</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;name is empty&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Nested Options</h3>

<p>Let&rsquo;s say our author variable is now an option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">author</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Author</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <em>isDefined</em> method is getting rather verbose and error prone here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">author</span><span class="o">.</span><span class="n">isDefined</span> <span class="o">&amp;&amp;</span> <span class="n">author</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="n">author</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">get</span> <span class="k">else</span> <span class="s">&quot;empty&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could use getOrElse here, but you would still need to check is the the author is defined. Still rather clunky.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">author</span><span class="o">.</span><span class="n">isDefined</span><span class="o">)</span> <span class="n">author</span><span class="o">.</span><span class="n">get</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The most idiomatic way to use nested options is map. The following will return the name if both author and author.name are present</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="n">author</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">name</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="n">author</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">name</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;name is empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Multiple Nested Options</h3>

<h4>Flatmap</h4>

<p>Let&rsquo;s up the ante here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Author</span><span class="o">(</span><span class="n">name</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Name</span><span class="o">])</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Name</span><span class="o">(</span><span class="n">firstName</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="n">lastName</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span>
</span><span class='line'><span class="k">val</span> <span class="n">author</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">Author</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this scenario, author, author.name, and author.firstName could be None. FlatMap to the rescue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span> <span class="k">=</span> <span class="n">author</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">name</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span> <span class="k">=</span> <span class="n">author</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">name</span><span class="o">).</span><span class="n">flatMap</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">firstName</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;first name is empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>flatMap reduces the nested options, allowing us to retrieve what we need. No need to use any if statements, it is type safe.</p>

<h4>For-Comprehension</h4>

<p>Another way is to use a for-comprehension. It is a little more verbose, but allows us to make the code a little cleaner and easy to maintain. It is best used when dealing with multiple levels of Options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">author</span> <span class="k">&lt;-</span> <span class="n">author</span>
</span><span class='line'>  <span class="n">name</span> <span class="k">&lt;-</span> <span class="n">author</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="n">firstName</span> <span class="k">&lt;-</span> <span class="n">name</span><span class="o">.</span><span class="n">firstName</span>
</span><span class='line'><span class="o">}</span> <span class="k">yield</span> <span class="n">firstName</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">authorName</span><span class="k">:</span><span class="kt">String</span> <span class="o">=</span> <span class="o">(</span><span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">author</span> <span class="k">&lt;-</span> <span class="n">author</span>
</span><span class='line'>  <span class="n">name</span> <span class="k">&lt;-</span> <span class="n">author</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="n">firstName</span> <span class="k">&lt;-</span> <span class="n">name</span><span class="o">.</span><span class="n">firstName</span>
</span><span class='line'><span class="o">}</span> <span class="k">yield</span> <span class="n">firstName</span><span class="o">).</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">&quot;First name is empty&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
